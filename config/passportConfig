// Inicializar Passport
app.use(passport.initialize());
app.use(passport.session());

// Configuración de la estrategia de autenticación local
passport.use(new LocalStrategy(
    {
        usernameField: 'email',
        passwordField: 'password',
    },
    function(email, password, done) {
        User.findOne({ email: email }, function(err, user) {
            if (err) { return done(err); }
            if (!user) {
                return done(null, false, { message: 'Correo electrónico incorrecto.' });
            }
            if (!user.validPassword(password)) {
                return done(null, false, { message: 'Contraseña incorrecta.' });
            }
            return done(null, user);
        });
    }
));

// Configuración de la estrategia de autenticación de GitHub
passport.use(
    new GitHubStrategy(
        {
            clientID: 'tu_client_id',
            clientSecret: 'tu_client_secret',
            callbackURL: 'http://localhost:3000/auth/github/callback',
        },
        (accessToken, refreshToken, profile, done) => {
            User.findOne({ githubId: profile.id }, (err, existingUser) => {
                if (err) { return done(err); }
                if (existingUser) {
                    return done(null, existingUser);
                } else {
                    const newUser = new User({
                        githubId: profile.id,
                        displayName: profile.displayName,
                    });
                    newUser.save((err) => {
                        if (err) { return done(err); }
                        return done(null, newUser);
                    });
                }
            });
        }
    )
);

passport.serializeUser(function(user, done) {
    done(null, user.id);
});

passport.deserializeUser(function(id, done) {
    User.findById(id, function(err, user) {
        done(err, user);
    });
});

app.get('/login', (req, res) => {
    res.render('login');
});

app.get('/auth/github', passport.authenticate('github'));

app.get(
    '/auth/github/callback',
    passport.authenticate('github', { failureRedirect: '/login' }),
    (req, res) => {
        res.redirect('/profile');
    }
);

app.get('/profile', (req, res) => {
    if (req.isAuthenticated()) {
        res.render('profile', { user: req.user });
    } else {
        res.redirect('/login');
    }
});

app.get('/logout', (req, res) => {
    req.logout();
    res.redirect('/login');
});